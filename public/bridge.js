let promiseChain=Promise.resolve(),callbacks={};const guid=function(){function e(){return Math.floor((1+Math.random())*65536).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()};window.WebViewBridge={send:function(e,t,s,n){let r={targetFunc:e,data:t||{}};(s||n)&&(r.msgId=guid());let o=JSON.stringify(r);promiseChain=promiseChain.then(function(){return new Promise(function(e){r.msgId&&(callbacks[r.msgId]={onsuccess:s,onerror:n}),window.ReactNativeWebView&&(console.log("Bridge send ",r),window.ReactNativeWebView.postMessage(o)),e()})}).catch(function(e){console.error("Bridge send failed "+e.message)})}},window.document.addEventListener("message",function(e){let t;try{t=JSON.parse(e.data)}catch(s){console.error("failed to parse message from bridge "+s);return}if(t.method&&RNMethods[t.method]){console.log(t);try{RNMethods[t.method](t.args),"string"==typeof t.success&&WebViewBridge.send(t.success)}catch(n){"string"==typeof t.error&&WebViewBridge.send(t.error),console.log(n)}}});const RNMethods={setApp(){localStorage.setItem("isApp","true")},setAppHash({appHash:e}){localStorage.setItem("appHash",e)},autoFillOtp({otp:e}){let t=document.getElementsByClassName("login_otp_field");for(let s=0;s<t.length;s++)t[s].getElementsByTagName("input")[0].value=e[s];document.getElementById("login_otp_button").click()}};
